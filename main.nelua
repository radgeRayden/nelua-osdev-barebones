-- -*- mode: lua; eval: (flycheck-mode -1) -*-
## pragmas.unitname = ''
## pragmas.nochecks = true
## pragmas.nogc = true

local bytebuf = @pointer(array(int8, 0))

local vga_color = @enum {
    BLACK = 0,
    BLUE = 1,
    GREEN = 2,
    CYAN = 3,
    RED = 4,
    MAGENTA = 5,
    BROWN = 6,
    LIGHT_GREY = 7,
    DARK_GREY = 8,
    LIGHT_BLUE = 9,
    LIGHT_GREEN = 10,
    LIGHT_CYAN = 11,
    LIGHT_RED = 12,
    LIGHT_MAGENTA = 13,
    LIGHT_BROWN = 14,
    WHITE = 15,
}

local function vga_entry_color (fg : vga_color, bg : vga_color) : uint8 <inline>
  return fg | bg << 4
end

local function vga_entry (uc : uint8, color : uint8)
  return (@uint16)(uc) | (@uint16)(color) << 8
end

local function strlen(str : bytebuf <const>) <inline>
  local len : usize = 0
  -- local str : pointer(array(int8, 0)) = str
  while (str[len] ~= 0) do
    len = len + 1
  end
  return len
end

-- a u32 number in base 10 can be up to 10 characters
local uistr_sbuf : array(int8, 11) -- scratch buffer for u32->string conversion
local function uint_tostring (number : uint32) : cstring
  local width : uint8
  -- we write the number backwards because it's easier
  for i=0,#uistr_sbuf-1 do
    local d : uint8 = (number % 10) + 48
    uistr_sbuf[i] = d
    width = width + 1
    number = number // 10
    -- after we divide it enough times, it is zero. If number
    -- was 0 we already wrote '0', otherwise by now we can
    -- know if it's done.
    if number == 0 then
      break
    end
  end
  -- and then reverse it
  for i=0,(width//2)-1 do
    local iend = width - i - 1
    local temp = uistr_sbuf[i]
    uistr_sbuf[i] = uistr_sbuf[iend]
    uistr_sbuf[iend] = temp
  end
  uistr_sbuf[width] = 0

  return &uistr_sbuf[0]
end

local VGA_WIDTH : usize <const> = 80
local VGA_HEIGHT : usize <const> = 25

local terminal_row : usize
local terminal_column : usize
local terminal_color : uint8
local terminal_buffer : pointer(array(uint16, 0))

local function terminal_initialize ()
  terminal_row = 0
  terminal_column = 0
  terminal_color = vga_entry_color(vga_color.LIGHT_GREY, vga_color.BLACK)
  terminal_buffer = (@pointer(array(uint16, 0)))(0xB8000)
  for y=0_usize, VGA_HEIGHT-1 do
    for x=0_usize, VGA_WIDTH-1 do
      local index : usize <const> = y * VGA_WIDTH + x
      terminal_buffer[index] = vga_entry(' '_uint8, terminal_color)
    end
  end
end

local function terminal_setcolor (color : uint8)
  terminal_color = color
end

local function terminal_putentryat (c : int8, color : uint8, x : usize, y : usize)
  local index : usize <const> = y * VGA_WIDTH + x
  terminal_buffer[index] = vga_entry(c, color)
end

local function terminal_putchar (c : int8)
  if c == '\n'_uint8 then
    goto newline
  end

  terminal_putentryat(c, terminal_color, terminal_column, terminal_row)
  terminal_column = terminal_column + 1

  if terminal_column == VGA_WIDTH then
    goto newline
  end

  return

  :: newline ::
  terminal_column = 0
  terminal_row = terminal_row + 1
  if terminal_row == VGA_HEIGHT then
      terminal_row = 0
  end
end

local function terminal_write (data : bytebuf <const>, size : usize)
  for i=0,size-1 do
    terminal_putchar(data[i])
  end
end

local function terminal_writestring(data : cstring <const>)
  terminal_write(data, strlen(data))
end

local function kernel_main () <entrypoint, codename 'kernel_main'>
  terminal_initialize()
  local counter : uint32
  while counter < 100 do
    counter = counter + 1
    terminal_writestring("Hello, kernel World! ")
    terminal_writestring(uint_tostring(0xFFFFFFFF))
    terminal_writestring("\n")
    terminal_writestring("Hello, kernel World! ")
    terminal_writestring(uint_tostring(01))
    terminal_writestring("\n")
  end
end
